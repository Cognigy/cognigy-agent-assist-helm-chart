# Default values for the Cognigy Agent Assist Helm chart. This is a YAML-formatted file.
# --- IMPORTANT ---
# Do not edit this file directly, create a new one instead with
# the values that need to be overridden. For more information, head over to
# https://docs.cognigy.com/live-agent/installation/deployment/installation-using-helm/
# ---

# Override the chart name
nameOverride: ""
# Override the full app name
fullnameOverride: ""

podAnnotations: {}
podSecurityContext:
  {}
  # fsGroup: 2000

securityContext:
  {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

## Credentials for pulling image from private image registry.
## ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
## NOTE 1: Either clear text credentials (registry, username and password) or pullSecrets must be provided.
imageCredentials:
  ## Alternatively specify the username, password and the url of the private registry.
  ## A kubernetes.io/dockerconfigjson type secret named "cognigy-registry-token" will be created based on these information.
  registry: "cognigy.azurecr.io"
  username: ""
  password: ""

  ## Alternatively specify an array of imagePullSecrets.
  ## Secrets must be manually created in the proper namespace beforehand.
  ## Example:
  ## pullSecrets:
  ##   - cognigyRegistrySecretName
  ##
  ## NOTE: When registry, username and password all are set, the pullSecrets are ignored.
  pullSecrets: []

## If neither Cognigy MongoDB Helm Chart (https://github.com/Cognigy/cognigy-mongodb-helm-chart) nor MongoDB Atlas is used
## set "mongodb.enabled": false. It will skip user initialization tasks. However, you will need to create users/passwords manually
mongodb:
  enabled: true
  ## MongoDB connection scheme, for Cognigy MongoDB Helm Chart use scheme: "mongodb", for MongoDB Atlas use scheme: "mongodb+srv"
  scheme: "mongodb"
  ## Parameters for MongoDB connection, leave empty for Cognigy MongoDB Helm Chart
  ## For MongoDB Atlas set params: "?retryWrites=true&w=majority"
  params: ""
  ## This MongoDB user and password must have the permission to create users and databases, so normally it is admin or root
  ## It does NOT have to be root user. We use these key names to be compatible with Bitnami MongoDB Helm Chert
  auth:
    rootUser: root
    rootPassword: ""
    ## Optionally provide the name of an existing secret with MongoDB credentials. Mandatory keys: `username` and `password`, that contains the value
    ## of "rootUser" and "rootPassword"
    ## NOTE: When it's set the previous parameters "rootUser" and "rootPassword" are ignored.
    ##
    existingSecret: ""
    ## MongoDB Atlas cluster parameters
    atlas:
      # Specify MongoDB Atlas projectId and clusterName
      projectId: ""
      clusterName: ""
      # Specify publicAPIKey and privateAPIKey with "Project Owner" permissions for the Project in which MongoDB Cluster is located
      ## For more information refer to MongoDB Atlas documentation: https://www.mongodb.com/docs/atlas/configure-api-access/#grant-programmatic-access-to-service
      publicAPIKey: ""
      privateAPIKey: ""
      ## Optionally provide the name of an existing secret with MongoDB Atlas credentials. Mandatory keys: `projectid`, `clustername`, `apikeypublic` and `apikeyprivate`
      ## that contains the value of MongoDB Atlas projectId, clusterName, publicAPIKey and privateAPIKey respectively.
      ## NOTE: When it's set the previous parameters "projectId", "clusterName", "publicAPIKey" and "privateAPIKey" are ignored.
      ##
      existingSecret: ""
  # Connection string for MongoDB replica set deployed with Cognigy MongoDB Helm Chart into 3 availability zones:
  # hosts: mongodb-0.mongodb-headless.mongodb.svc.cluster.local:27017,mongodb-1.mongodb-headless.mongodb.svc.cluster.local:27017,mongodb-2.mongodb-headless.mongodb.svc.cluster.local:27017
  # Connection string for development and testing with a single replica MongoDB deployed with Cognigy MongoDB Helm Chart:
  # hosts: "mongodb-0.mongodb-headless.mongodb.svc.cluster.local:27017"
  # For MongoDB Atlas use the connection string of your MongoDB Atlas Cluster
  hosts: mongodb-0.mongodb-headless.mongodb.svc.cluster.local:27017,mongodb-1.mongodb-headless.mongodb.svc.cluster.local:27017,mongodb-2.mongodb-headless.mongodb.svc.cluster.local:27017
  ## db-init generator image
  ##
  dbinit:
    image: cognigy.azurecr.io/mongodb:5.0.18-debian-11-r3
    securityContext: {}

redis:
  enabled: true
  fullnameOverride: redis-ha
  global:
    imagePullSecrets:
      - cognigy-registry-token
  auth:
    existingSecret: "agent-assist-redis-password"
    existingSecretPasswordKey: "REDIS_PASSWORD"
  image:
    registry: cognigy.azurecr.io
    repository: redis
    tag: 7.2.0-debian-11-r3
  commonConfiguration: |-
    appendonly no
    protected-mode no
    repl-diskless-sync no
    save 60 1
    stop-writes-on-bgsave-error no
  replica:
    replicaCount: 3
    resources:
      limits:
        cpu: 500m
        memory: 512Mi
      requests:
        cpu: 500m
        memory: 512Mi
    podLabels:
      uniquezone: "aa-redis-ha"
    affinity:
      podAntiAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
                - key: "uniquezone"
                  operator: In
                  values:
                    - "aa-redis-ha"
            topologyKey: "topology.kubernetes.io/zone"
    persistence:
      enabled: false
  sentinel:
    enabled: true
    image:
      registry: cognigy.azurecr.io
      repository: redis-sentinel
      tag: 7.2.0-debian-11-r3
    automateClusterRecovery: true
    downAfterMilliseconds: 2000
    failoverTimeout: 10000
    resources:
      limits:
        cpu: 500m
        memory: 512Mi
      requests:
        cpu: 200m
        memory: 100Mi
  metrics:
    enabled: true
    image:
      registry: cognigy.azurecr.io
      repository: redis-exporter
      tag: 1.52.0-debian-11-r23
    resources:
      limits:
        cpu: 200m
        memory: 200Mi
      requests:
        cpu: 200m
        memory: 200Mi
    serviceMonitor:
      enabled: false

backend:
  image:
    repository: cognigy.azurecr.io/agent-assist-backend
    pullPolicy: IfNotPresent
    tag: "48805fb-1692199263"
  replica: 3
  priorityClassName: ""

  service:
    name: cognigy-agent-assist-backend
    internalPort: 8000
    targetPort: 8000
    type: ClusterIP
    annotations:
      {}
      # For example
      #  service.beta.kubernetes.io/aws-load-balancer-type: external
      #  service.beta.kubernetes.io/aws-load-balancer-nlb-target-type: ip
      #  service.beta.kubernetes.io/aws-load-balancer-scheme: internet-facing

  ingress:
    enabled: true
    hosts:
      - host: "<host>"
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                port:
                  number: 8000
    # tls:
    #  - secretName: chart-example-tls
    #    hosts:
    #      - chart-example.local

  # Health configuration
  health:
    port: 8001

  # Metrics configuration
  metrics:
    port: 8002

  # The API access token to use for authenticating the Backend with the Cognigy.AI endpoint
  cognigyServiceEndpointApiAccessToken:
    # Existing secret must have `api-access-token` as secret key
    existingSecret: ""
    # Optionally create the secret by setting the api key here (not recommended)
    # value: ""

  # The API access token to use for authenticating the Backend with the Cognigy.AI handover endpoint
  cognigyServiceHandoverApiAccessToken:
    # Existing secret must have `api-access-token` as secret key
    existingSecret: ""
    # Optionally create the secret by setting the api key here (not recommended)
    # value: ""

  # The API key to use for authenticating the Frontend with the Backend
  apiKey:
    # Existing secret must have `api-key` as secret key
    existingSecret: ""
    # Optionally create the secret by setting the api key here (not recommended)
    # value: ""

  # Config map env variables
  configmap:
    # Allowed origins for CORS
    ALLOWED_ORIGINS: ""
    # URL of the Agent Assist Frontend
    FRONTEND_URL: ""
    # Redis reconnect configuration
    REDIS_ENABLE_RECONNECT: "true"
    # Cognigy.AI integration (same for service-handover/service-endpoint)
    COGNIGY_AI_ENDPOINT_URL_WITH_PROTOCOL: ""
    # Redis Sentinel enabled
    FEATURE_REDIS_SENTINEL_MODE_ENABLED: "true"
    REDIS_SENTINEL_PORT: "26379"
    REDIS_SENTINEL_HOST: "redis-ha-headless"
    REDIS_SENTINEL_MASTER_NAME: "mymaster"
    # Tracing
    # TRACING_BASE_URL_WITH_PROTOCOL: ""
    # TRACING_ERRORS_ENABLE: "true"
    # TRACING_ENABLED: "true"
    # TRACING_EVENTS_SAMPLE_RATE: "0"
    # TRACING_SAMPLE_RATE: "0"
  resources:
    {}
    # We usually recommend not to specify default resources and to leave this as a conscious
    # choice for the user. This also increases chances charts run on environments with little
    # resources, such as Minikube. If you do want to specify resources, uncomment the following
    # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
    # limits:
    #   cpu: 1000m
    #   memory: 600Mi
    # requests:
    #   cpu: 1000m
    #   memory: 400Mi

frontend:
  # Possibility to use the BE in headless mode
  enabled: true
  image:
    repository: cognigy.azurecr.io/agent-assist-frontend
    pullPolicy: IfNotPresent
    tag: "254615d-1692789438"
  replica: 3
  priorityClassName: ""

  service:
    name: cognigy-agent-assist-frontend
    internalPort: 8000
    targetPort: 8000
    type: ClusterIP
    annotations:
      {}
      # For example
      #  service.beta.kubernetes.io/aws-load-balancer-type: external
      #  service.beta.kubernetes.io/aws-load-balancer-nlb-target-type: ip
      #  service.beta.kubernetes.io/aws-load-balancer-scheme: internet-facing

  ingress:
    enabled: true
    hosts:
      - host: "<host>"
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                port:
                  number: 8000
    # tls:
    #  - secretName: chart-example-tls
    #    hosts:
    #      - chart-example.local

  # Health configuration
  health:
    port: 8001

  # Metrics configuration
  metrics:
    port: 8002
  resources:
    {}
    # We usually recommend not to specify default resources and to leave this as a conscious
    # choice for the user. This also increases chances charts run on environments with little
    # resources, such as Minikube. If you do want to specify resources, uncomment the following
    # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
    # limits:
    #   cpu: 1000m
    #   memory: 600Mi
    # requests:
    #   cpu: 1000m
    #   memory: 400Mi

  configmap:
    # Google maps api token to have maps available for locations
    # GOOGLE_MAPS_API_TOKEN: "<your-google-map-api-token>"
    # to enable sentry, fill out the values below. Add your dsn to the TRACING_BASE_URL_WITH_PROTOCOL setting.
    # TRACING_BASE_URL_WITH_PROTOCOL: ""
    # TRACING_SAMPLE_RATE: "0"
    # TRACING_TRACES_SAMPLE_RATE: "0"
    # TRACING_REPLAYS_ON_ERROR_SAMPLE_RATE: "0"
    # TRACING_REPLAYS_SESSION_SAMPLE_RATE: "0"
    # TRACING_TEAM_NAME: ""
    # TRACING_RELEASE: ""
    # TRACING_ENVIRONMENT: ""
    # TRACING_MAX_BREADCRUMBS: "0"

genesysNotificationsForwarder:
  enabled: false
  image:
    repository: cognigy.azurecr.io/agent-assist-genesys-notifications-forwarder
    pullPolicy: IfNotPresent
    tag: "ca5468d-1693905622"
  replica: 1
  priorityClassName: ""

  service:
    name: cognigy-agent-assist-genesys-notifications-forwarder
    internalPort: 8000
    targetPort: 8000
    type: ClusterIP
    annotations:
      {}
      # For example
      #  service.beta.kubernetes.io/aws-load-balancer-type: external
      #  service.beta.kubernetes.io/aws-load-balancer-nlb-target-type: ip
      #  service.beta.kubernetes.io/aws-load-balancer-scheme: internet-facing

  ingress:
    enabled: true
    hosts:
      - host: "<host>"
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                port:
                  number: 8000
    # tls:
    #  - secretName: chart-example-tls
    #    hosts:
    #      - chart-example.local

  # Health configuration
  health:
    port: 8001

  # Metrics configuration
  metrics:
    port: 8002
  resources:
    {}
    # We usually recommend not to specify default resources and to leave this as a conscious
    # choice for the user. This also increases chances charts run on environments with little
    # resources, such as Minikube. If you do want to specify resources, uncomment the following
    # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
    # limits:
    #   cpu: 1000m
    #   memory: 600Mi
    # requests:
    #   cpu: 1000m
    #   memory: 400Mi

  # The API key to use for authenticating the requests done to the service API
  apiKey:
    # Existing secret must have `api-key` as secret key
    existingSecret: ""
    # Optionally create the secret by setting the api key here (not recommended)
    # value: ""

  # Geneys Cloud Credentials
  credentials:
    # Existing secret must have `client-id` and 'client-secret' as secret keys
    existingSecret: ""

    # The Genesys Client ID to use for authenticating with the Genesys Cloud API
    clientId:
      # Optionally create the secret by setting the client ID here (not recommended)
      # value: ""

    # The Genesys Client Secret to use for authenticating with the Genesys Cloud API
    clientSecret:
      # Optionally create the secret by setting the client secret here (not recommended)
      # value: ""

  configmap:
    # LOGGER_LEVEL: "debug"
    # GENESYS_ENVIRONMENT: "mypurecloud.de"
    # Redis Sentinel enabled
    FEATURE_REDIS_SENTINEL_MODE_ENABLED: "true"
    REDIS_SENTINEL_PORT: "26379"
    REDIS_SENTINEL_HOST: "redis-ha-headless"
    REDIS_SENTINEL_MASTER_NAME: "mymaster"

monitoring:
  enabled: false

# For testing purposes only
loadTestingMode:
  enabled: false
  priorityClassName: ""

nodeSelector: {}

tolerations: []
